// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PowerControl Config power control for enodeB.
// swagger:model power_control
type PowerControl struct {

	// the value from -600, -477, -300, -177, 0, 100, 200, or 300.
	Pa int32 `json:"pa,omitempty"`

	// the parameter pb will set from 0,1,2,3
	// Enum: [0 1 2 3]
	Pb uint32 `json:"pb,omitempty"`

	// the power level.
	PowerClass uint32 `json:"power_class,omitempty"`

	// specified in dBm, with a numeric range between -60 and 50 inclusive.
	// Maximum: 50
	// Minimum: -60
	ReferenceSignalPower *int32 `json:"reference_signal_power,omitempty"`
}

// Validate validates this power control
func (m *PowerControl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceSignalPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var powerControlTypePbPropEnum []interface{}

func init() {
	var res []uint32
	if err := json.Unmarshal([]byte(`[0,1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		powerControlTypePbPropEnum = append(powerControlTypePbPropEnum, v)
	}
}

// prop value enum
func (m *PowerControl) validatePbEnum(path, location string, value uint32) error {
	if err := validate.Enum(path, location, value, powerControlTypePbPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PowerControl) validatePb(formats strfmt.Registry) error {

	if swag.IsZero(m.Pb) { // not required
		return nil
	}

	// value enum
	if err := m.validatePbEnum("pb", "body", m.Pb); err != nil {
		return err
	}

	return nil
}

func (m *PowerControl) validateReferenceSignalPower(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceSignalPower) { // not required
		return nil
	}

	if err := validate.MinimumInt("reference_signal_power", "body", int64(*m.ReferenceSignalPower), -60, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reference_signal_power", "body", int64(*m.ReferenceSignalPower), 50, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PowerControl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PowerControl) UnmarshalBinary(b []byte) error {
	var res PowerControl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
