// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NeighborCell Neighbor Cell Configuration for eNodeb devices.
// swagger:model neighborCell
type NeighborCell struct {

	// cell id
	// Maximum: 2.68435455e+08
	CellID uint32 `json:"cell_id,omitempty"`

	// cio
	// Enum: [-24 -22]
	Cio int32 `json:"cio,omitempty"`

	// earfcn
	Earfcn uint32 `json:"earfcn,omitempty"`

	// enable
	Enable bool `json:"enable,omitempty"`

	// index
	// Maximum: 16
	// Minimum: 1
	Index uint32 `json:"index,omitempty"`

	// pci
	// Maximum: 503
	// Minimum: > 0
	Pci uint32 `json:"pci,omitempty"`

	// plmn
	// Pattern: ^(\d{5,6})$
	Plmn string `json:"plmn,omitempty"`

	// q offset
	// Enum: [-24 -22 -20]
	QOffset int32 `json:"q_offset,omitempty"`

	// tac
	// Maximum: 65535
	// Minimum: 1
	Tac uint32 `json:"tac,omitempty"`
}

// Validate validates this neighbor cell
func (m *NeighborCell) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCellID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePci(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlmn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NeighborCell) validateCellID(formats strfmt.Registry) error {

	if swag.IsZero(m.CellID) { // not required
		return nil
	}

	if err := validate.MaximumInt("cell_id", "body", int64(m.CellID), 2.68435455e+08, false); err != nil {
		return err
	}

	return nil
}

var neighborCellTypeCioPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[-24,-22]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		neighborCellTypeCioPropEnum = append(neighborCellTypeCioPropEnum, v)
	}
}

// prop value enum
func (m *NeighborCell) validateCioEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, neighborCellTypeCioPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NeighborCell) validateCio(formats strfmt.Registry) error {

	if swag.IsZero(m.Cio) { // not required
		return nil
	}

	// value enum
	if err := m.validateCioEnum("cio", "body", m.Cio); err != nil {
		return err
	}

	return nil
}

func (m *NeighborCell) validateIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.Index) { // not required
		return nil
	}

	if err := validate.MinimumInt("index", "body", int64(m.Index), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("index", "body", int64(m.Index), 16, false); err != nil {
		return err
	}

	return nil
}

func (m *NeighborCell) validatePci(formats strfmt.Registry) error {

	if swag.IsZero(m.Pci) { // not required
		return nil
	}

	if err := validate.MinimumInt("pci", "body", int64(m.Pci), 0, true); err != nil {
		return err
	}

	if err := validate.MaximumInt("pci", "body", int64(m.Pci), 503, false); err != nil {
		return err
	}

	return nil
}

func (m *NeighborCell) validatePlmn(formats strfmt.Registry) error {

	if swag.IsZero(m.Plmn) { // not required
		return nil
	}

	if err := validate.Pattern("plmn", "body", string(m.Plmn), `^(\d{5,6})$`); err != nil {
		return err
	}

	return nil
}

var neighborCellTypeQOffsetPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[-24,-22,-20]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		neighborCellTypeQOffsetPropEnum = append(neighborCellTypeQOffsetPropEnum, v)
	}
}

// prop value enum
func (m *NeighborCell) validateQOffsetEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, neighborCellTypeQOffsetPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NeighborCell) validateQOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.QOffset) { // not required
		return nil
	}

	// value enum
	if err := m.validateQOffsetEnum("q_offset", "body", m.QOffset); err != nil {
		return err
	}

	return nil
}

func (m *NeighborCell) validateTac(formats strfmt.Registry) error {

	if swag.IsZero(m.Tac) { // not required
		return nil
	}

	if err := validate.MinimumInt("tac", "body", int64(m.Tac), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tac", "body", int64(m.Tac), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NeighborCell) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NeighborCell) UnmarshalBinary(b []byte) error {
	var res NeighborCell
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
